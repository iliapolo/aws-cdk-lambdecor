{
  "Resources": {
    "Bucket83908E77": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/Bucket/Resource"
      }
    },
    "LambdaFunctionwhichtype28318315ServiceRole68C0F08F": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-which_type-28318315/ServiceRole/Resource"
      }
    },
    "LambdaFunctionwhichtype28318315AD88AC43": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef which_type(arg):\n  return f'type of {arg} is {type(arg)}'\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args_prop = props.get('args', '[]')\n  kwargs_prop = props.get('kwargs', '{}')\n\n  # deserialize on input since we serialize on output\n  args = json.loads(args_prop)\n  kwargs = json.loads(kwargs_prop)\n\n  # invoke the original function with the original arguments.\n  return_value = which_type(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctionwhichtype28318315ServiceRole68C0F08F",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctionwhichtype28318315ServiceRole68C0F08F"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-which_type-28318315/Resource"
      }
    },
    "CustomResourceProviderwhichtype28318315frameworkonEventServiceRole503FBBF4": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-28318315/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProviderwhichtype28318315frameworkonEventServiceRoleDefaultPolicyB34825BF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctionwhichtype28318315AD88AC43",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProviderwhichtype28318315frameworkonEventServiceRoleDefaultPolicyB34825BF",
        "Roles": [
          {
            "Ref": "CustomResourceProviderwhichtype28318315frameworkonEventServiceRole503FBBF4"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-28318315/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProviderwhichtype28318315frameworkonEventCB905B18": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProviderwhichtype28318315frameworkonEventServiceRole503FBBF4",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-28318315)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctionwhichtype28318315AD88AC43",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProviderwhichtype28318315frameworkonEventServiceRoleDefaultPolicyB34825BF",
        "CustomResourceProviderwhichtype28318315frameworkonEventServiceRole503FBBF4"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-28318315/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcewhichtype28318315": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProviderwhichtype28318315frameworkonEventCB905B18",
            "Arn"
          ]
        },
        "args": "[\"input\"]",
        "kwargs": "{}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-which_type-28318315/Default"
      }
    },
    "LambdaFunctionwhichtype83240047ServiceRole086C139C": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-which_type-83240047/ServiceRole/Resource"
      }
    },
    "LambdaFunctionwhichtype83240047B662216D": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef which_type(arg):\n  return f'type of {arg} is {type(arg)}'\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args_prop = props.get('args', '[]')\n  kwargs_prop = props.get('kwargs', '{}')\n\n  # deserialize on input since we serialize on output\n  args = json.loads(args_prop)\n  kwargs = json.loads(kwargs_prop)\n\n  # invoke the original function with the original arguments.\n  return_value = which_type(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctionwhichtype83240047ServiceRole086C139C",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctionwhichtype83240047ServiceRole086C139C"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-which_type-83240047/Resource"
      }
    },
    "CustomResourceProviderwhichtype83240047frameworkonEventServiceRoleAB2B3D35": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-83240047/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProviderwhichtype83240047frameworkonEventServiceRoleDefaultPolicyD4EEB65F": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctionwhichtype83240047B662216D",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProviderwhichtype83240047frameworkonEventServiceRoleDefaultPolicyD4EEB65F",
        "Roles": [
          {
            "Ref": "CustomResourceProviderwhichtype83240047frameworkonEventServiceRoleAB2B3D35"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-83240047/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProviderwhichtype83240047frameworkonEvent14554F23": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProviderwhichtype83240047frameworkonEventServiceRoleAB2B3D35",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-83240047)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctionwhichtype83240047B662216D",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProviderwhichtype83240047frameworkonEventServiceRoleDefaultPolicyD4EEB65F",
        "CustomResourceProviderwhichtype83240047frameworkonEventServiceRoleAB2B3D35"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-83240047/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcewhichtype83240047": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProviderwhichtype83240047frameworkonEvent14554F23",
            "Arn"
          ]
        },
        "args": "[5]",
        "kwargs": "{}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-which_type-83240047/Default"
      }
    },
    "LambdaFunctionwhichtype76634127ServiceRoleDDCFCCCC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-which_type-76634127/ServiceRole/Resource"
      }
    },
    "LambdaFunctionwhichtype7663412733773FDF": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef which_type(arg):\n  return f'type of {arg} is {type(arg)}'\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args_prop = props.get('args', '[]')\n  kwargs_prop = props.get('kwargs', '{}')\n\n  # deserialize on input since we serialize on output\n  args = json.loads(args_prop)\n  kwargs = json.loads(kwargs_prop)\n\n  # invoke the original function with the original arguments.\n  return_value = which_type(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctionwhichtype76634127ServiceRoleDDCFCCCC",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctionwhichtype76634127ServiceRoleDDCFCCCC"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-which_type-76634127/Resource"
      }
    },
    "CustomResourceProviderwhichtype76634127frameworkonEventServiceRole2E0FE240": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-76634127/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProviderwhichtype76634127frameworkonEventServiceRoleDefaultPolicy5CD1F0A8": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctionwhichtype7663412733773FDF",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProviderwhichtype76634127frameworkonEventServiceRoleDefaultPolicy5CD1F0A8",
        "Roles": [
          {
            "Ref": "CustomResourceProviderwhichtype76634127frameworkonEventServiceRole2E0FE240"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-76634127/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProviderwhichtype76634127frameworkonEvent5D9EE3D7": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProviderwhichtype76634127frameworkonEventServiceRole2E0FE240",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-76634127)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctionwhichtype7663412733773FDF",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProviderwhichtype76634127frameworkonEventServiceRoleDefaultPolicy5CD1F0A8",
        "CustomResourceProviderwhichtype76634127frameworkonEventServiceRole2E0FE240"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-which_type-76634127/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcewhichtype76634127": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProviderwhichtype76634127frameworkonEvent5D9EE3D7",
            "Arn"
          ]
        },
        "args": "[true]",
        "kwargs": "{}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-which_type-76634127/Default"
      }
    }
  },
  "Parameters": {
    "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4": {
      "Type": "String",
      "Description": "S3 bucket for asset \"812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14\""
    },
    "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41": {
      "Type": "String",
      "Description": "S3 key for asset version \"812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14\""
    },
    "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14ArtifactHash47216AA1": {
      "Type": "String",
      "Description": "Artifact hash for asset \"812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14\""
    }
  },
  "Outputs": {
    "String": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcewhichtype28318315",
          "Value"
        ]
      }
    },
    "Integer": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcewhichtype83240047",
          "Value"
        ]
      }
    },
    "Boolean": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcewhichtype76634127",
          "Value"
        ]
      }
    }
  }
}