{
  "Resources": {
    "Bucket83908E77": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/Bucket/Resource"
      }
    },
    "LambdaFunctiontypeof8ede3c2b8ServiceRole1D4325AD": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-typeof8ede3c2b8/ServiceRole/Resource"
      }
    },
    "LambdaFunctiontypeof8ede3c2b83601E806": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef typeof(positional, named):\n  return f'(positional={positional})({type(positional)}) | (named={named})({type(named)})'\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args_prop = props.get('args', '[]')\n  kwargs_prop = props.get('kwargs', '{}')\n\n  # deserialize on input since we serialize on output\n  args = json.loads(args_prop)\n  kwargs = json.loads(kwargs_prop)\n\n  # invoke the original function with the original arguments.\n  return_value = typeof(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctiontypeof8ede3c2b8ServiceRole1D4325AD",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctiontypeof8ede3c2b8ServiceRole1D4325AD"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-typeof8ede3c2b8/Resource"
      }
    },
    "CustomResourceProvidertypeof8ede3c2b8frameworkonEventServiceRole76A65AC8": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof8ede3c2b8/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProvidertypeof8ede3c2b8frameworkonEventServiceRoleDefaultPolicyD33171D7": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctiontypeof8ede3c2b83601E806",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProvidertypeof8ede3c2b8frameworkonEventServiceRoleDefaultPolicyD33171D7",
        "Roles": [
          {
            "Ref": "CustomResourceProvidertypeof8ede3c2b8frameworkonEventServiceRole76A65AC8"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof8ede3c2b8/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProvidertypeof8ede3c2b8frameworkonEvent451D5CDA": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProvidertypeof8ede3c2b8frameworkonEventServiceRole76A65AC8",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof8ede3c2b8)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctiontypeof8ede3c2b83601E806",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProvidertypeof8ede3c2b8frameworkonEventServiceRoleDefaultPolicyD33171D7",
        "CustomResourceProvidertypeof8ede3c2b8frameworkonEventServiceRole76A65AC8"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof8ede3c2b8/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcetypeof8ede3c2b8": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProvidertypeof8ede3c2b8frameworkonEvent451D5CDA",
            "Arn"
          ]
        },
        "args": "[\"input\"]",
        "kwargs": "{\"named\": \"input\"}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-typeof8ede3c2b8/Default"
      }
    },
    "LambdaFunctiontypeoff58a6c73aServiceRole8AD8EB7E": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-typeoff58a6c73a/ServiceRole/Resource"
      }
    },
    "LambdaFunctiontypeoff58a6c73aACA740F5": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef typeof(positional, named):\n  return f'(positional={positional})({type(positional)}) | (named={named})({type(named)})'\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args_prop = props.get('args', '[]')\n  kwargs_prop = props.get('kwargs', '{}')\n\n  # deserialize on input since we serialize on output\n  args = json.loads(args_prop)\n  kwargs = json.loads(kwargs_prop)\n\n  # invoke the original function with the original arguments.\n  return_value = typeof(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctiontypeoff58a6c73aServiceRole8AD8EB7E",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctiontypeoff58a6c73aServiceRole8AD8EB7E"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-typeoff58a6c73a/Resource"
      }
    },
    "CustomResourceProvidertypeoff58a6c73aframeworkonEventServiceRoleA2039817": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeoff58a6c73a/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProvidertypeoff58a6c73aframeworkonEventServiceRoleDefaultPolicy71740399": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctiontypeoff58a6c73aACA740F5",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProvidertypeoff58a6c73aframeworkonEventServiceRoleDefaultPolicy71740399",
        "Roles": [
          {
            "Ref": "CustomResourceProvidertypeoff58a6c73aframeworkonEventServiceRoleA2039817"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeoff58a6c73a/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProvidertypeoff58a6c73aframeworkonEvent1BAE46AF": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProvidertypeoff58a6c73aframeworkonEventServiceRoleA2039817",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeoff58a6c73a)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctiontypeoff58a6c73aACA740F5",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProvidertypeoff58a6c73aframeworkonEventServiceRoleDefaultPolicy71740399",
        "CustomResourceProvidertypeoff58a6c73aframeworkonEventServiceRoleA2039817"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeoff58a6c73a/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcetypeoff58a6c73a": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProvidertypeoff58a6c73aframeworkonEvent1BAE46AF",
            "Arn"
          ]
        },
        "args": "[5]",
        "kwargs": "{\"named\": 5}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-typeoff58a6c73a/Default"
      }
    },
    "LambdaFunctiontypeof0ac267454ServiceRoleF24D5025": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-typeof0ac267454/ServiceRole/Resource"
      }
    },
    "LambdaFunctiontypeof0ac2674547688F449": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef typeof(positional, named):\n  return f'(positional={positional})({type(positional)}) | (named={named})({type(named)})'\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args_prop = props.get('args', '[]')\n  kwargs_prop = props.get('kwargs', '{}')\n\n  # deserialize on input since we serialize on output\n  args = json.loads(args_prop)\n  kwargs = json.loads(kwargs_prop)\n\n  # invoke the original function with the original arguments.\n  return_value = typeof(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctiontypeof0ac267454ServiceRoleF24D5025",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctiontypeof0ac267454ServiceRoleF24D5025"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-typeof0ac267454/Resource"
      }
    },
    "CustomResourceProvidertypeof0ac267454frameworkonEventServiceRoleA4D8F5B4": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof0ac267454/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProvidertypeof0ac267454frameworkonEventServiceRoleDefaultPolicyF4E4F611": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctiontypeof0ac2674547688F449",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProvidertypeof0ac267454frameworkonEventServiceRoleDefaultPolicyF4E4F611",
        "Roles": [
          {
            "Ref": "CustomResourceProvidertypeof0ac267454frameworkonEventServiceRoleA4D8F5B4"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof0ac267454/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProvidertypeof0ac267454frameworkonEventD7C5AB5B": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProvidertypeof0ac267454frameworkonEventServiceRoleA4D8F5B4",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof0ac267454)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctiontypeof0ac2674547688F449",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProvidertypeof0ac267454frameworkonEventServiceRoleDefaultPolicyF4E4F611",
        "CustomResourceProvidertypeof0ac267454frameworkonEventServiceRoleA4D8F5B4"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof0ac267454/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcetypeof0ac267454": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProvidertypeof0ac267454frameworkonEventD7C5AB5B",
            "Arn"
          ]
        },
        "args": "[true]",
        "kwargs": "{\"named\": true}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-typeof0ac267454/Default"
      }
    },
    "LambdaFunctiontypeof9f53eb66aServiceRoleAAA925EA": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-typeof9f53eb66a/ServiceRole/Resource"
      }
    },
    "LambdaFunctiontypeof9f53eb66a80CF5EC7": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef typeof(positional, named):\n  return f'(positional={positional})({type(positional)}) | (named={named})({type(named)})'\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args_prop = props.get('args', '[]')\n  kwargs_prop = props.get('kwargs', '{}')\n\n  # deserialize on input since we serialize on output\n  args = json.loads(args_prop)\n  kwargs = json.loads(kwargs_prop)\n\n  # invoke the original function with the original arguments.\n  return_value = typeof(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctiontypeof9f53eb66aServiceRoleAAA925EA",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctiontypeof9f53eb66aServiceRoleAAA925EA"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-typeof9f53eb66a/Resource"
      }
    },
    "CustomResourceProvidertypeof9f53eb66aframeworkonEventServiceRole6406471A": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof9f53eb66a/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProvidertypeof9f53eb66aframeworkonEventServiceRoleDefaultPolicy691E89B3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctiontypeof9f53eb66a80CF5EC7",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProvidertypeof9f53eb66aframeworkonEventServiceRoleDefaultPolicy691E89B3",
        "Roles": [
          {
            "Ref": "CustomResourceProvidertypeof9f53eb66aframeworkonEventServiceRole6406471A"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof9f53eb66a/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProvidertypeof9f53eb66aframeworkonEvent00783D2F": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProvidertypeof9f53eb66aframeworkonEventServiceRole6406471A",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof9f53eb66a)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctiontypeof9f53eb66a80CF5EC7",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProvidertypeof9f53eb66aframeworkonEventServiceRoleDefaultPolicy691E89B3",
        "CustomResourceProvidertypeof9f53eb66aframeworkonEventServiceRole6406471A"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-typeof9f53eb66a/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcetypeof9f53eb66a": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProvidertypeof9f53eb66aframeworkonEvent00783D2F",
            "Arn"
          ]
        },
        "args": {
          "Fn::Join": [
            "",
            [
              "[\"",
              {
                "Ref": "Bucket83908E77"
              },
              "\"]"
            ]
          ]
        },
        "kwargs": {
          "Fn::Join": [
            "",
            [
              "{\"named\": \"",
              {
                "Ref": "Bucket83908E77"
              },
              "\"}"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-typeof9f53eb66a/Default"
      }
    }
  },
  "Parameters": {
    "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4": {
      "Type": "String",
      "Description": "S3 bucket for asset \"812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14\""
    },
    "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41": {
      "Type": "String",
      "Description": "S3 key for asset version \"812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14\""
    },
    "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14ArtifactHash47216AA1": {
      "Type": "String",
      "Description": "Artifact hash for asset \"812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14\""
    }
  },
  "Outputs": {
    "String": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcetypeof8ede3c2b8",
          "Value"
        ]
      }
    },
    "Integer": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcetypeoff58a6c73a",
          "Value"
        ]
      }
    },
    "Boolean": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcetypeof0ac267454",
          "Value"
        ]
      }
    },
    "TokenString": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcetypeof9f53eb66a",
          "Value"
        ]
      }
    }
  }
}