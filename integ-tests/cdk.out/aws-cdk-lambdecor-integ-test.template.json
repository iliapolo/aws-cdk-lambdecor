{
  "Resources": {
    "Bucket83908E77": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/Bucket/Resource"
      }
    },
    "LambdaFunctionreturnstringServiceRole102D84CF": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-return_string/ServiceRole/Resource"
      }
    },
    "LambdaFunctionreturnstring0F66AC22": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef return_string(input):\n  return f'input={input}'\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args   = json.loads(props.get('args', '[]'))\n  kwargs = json.loads(props.get('kwargs', '{}'))\n\n  # invoke the original function with the original arguments.\n  return_value = return_string(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctionreturnstringServiceRole102D84CF",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctionreturnstringServiceRole102D84CF"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-return_string/Resource"
      }
    },
    "CustomResourceProviderreturnstringframeworkonEventServiceRoleE85D74A7": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_string/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProviderreturnstringframeworkonEventServiceRoleDefaultPolicyC48EE8E0": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctionreturnstring0F66AC22",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProviderreturnstringframeworkonEventServiceRoleDefaultPolicyC48EE8E0",
        "Roles": [
          {
            "Ref": "CustomResourceProviderreturnstringframeworkonEventServiceRoleE85D74A7"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_string/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProviderreturnstringframeworkonEventD51AD1B0": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProviderreturnstringframeworkonEventServiceRoleE85D74A7",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_string)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctionreturnstring0F66AC22",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProviderreturnstringframeworkonEventServiceRoleDefaultPolicyC48EE8E0",
        "CustomResourceProviderreturnstringframeworkonEventServiceRoleE85D74A7"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_string/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcereturnstring": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProviderreturnstringframeworkonEventD51AD1B0",
            "Arn"
          ]
        },
        "args": "[\"input\"]",
        "kwargs": "{}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-return_string/Default"
      }
    },
    "LambdaFunctionreturnintServiceRole85544399": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-return_int/ServiceRole/Resource"
      }
    },
    "LambdaFunctionreturnint02D94574": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef return_int(input):\n  return input + 1\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args   = json.loads(props.get('args', '[]'))\n  kwargs = json.loads(props.get('kwargs', '{}'))\n\n  # invoke the original function with the original arguments.\n  return_value = return_int(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctionreturnintServiceRole85544399",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctionreturnintServiceRole85544399"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-return_int/Resource"
      }
    },
    "CustomResourceProviderreturnintframeworkonEventServiceRole20CB5B18": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_int/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProviderreturnintframeworkonEventServiceRoleDefaultPolicy84DDB11B": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctionreturnint02D94574",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProviderreturnintframeworkonEventServiceRoleDefaultPolicy84DDB11B",
        "Roles": [
          {
            "Ref": "CustomResourceProviderreturnintframeworkonEventServiceRole20CB5B18"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_int/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProviderreturnintframeworkonEventD1E45267": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProviderreturnintframeworkonEventServiceRole20CB5B18",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_int)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctionreturnint02D94574",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProviderreturnintframeworkonEventServiceRoleDefaultPolicy84DDB11B",
        "CustomResourceProviderreturnintframeworkonEventServiceRole20CB5B18"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_int/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcereturnint": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProviderreturnintframeworkonEventD1E45267",
            "Arn"
          ]
        },
        "args": "[5]",
        "kwargs": "{}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-return_int/Default"
      }
    },
    "LambdaFunctionreturnbooleanServiceRoleE271E7B1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-return_boolean/ServiceRole/Resource"
      }
    },
    "LambdaFunctionreturnbooleanA4D86E1F": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef return_boolean(input):\n  return input != True\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args   = json.loads(props.get('args', '[]'))\n  kwargs = json.loads(props.get('kwargs', '{}'))\n\n  # invoke the original function with the original arguments.\n  return_value = return_boolean(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctionreturnbooleanServiceRoleE271E7B1",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctionreturnbooleanServiceRoleE271E7B1"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-return_boolean/Resource"
      }
    },
    "CustomResourceProviderreturnbooleanframeworkonEventServiceRoleBE461280": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_boolean/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProviderreturnbooleanframeworkonEventServiceRoleDefaultPolicy83DEAF51": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctionreturnbooleanA4D86E1F",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProviderreturnbooleanframeworkonEventServiceRoleDefaultPolicy83DEAF51",
        "Roles": [
          {
            "Ref": "CustomResourceProviderreturnbooleanframeworkonEventServiceRoleBE461280"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_boolean/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProviderreturnbooleanframeworkonEvent0E507764": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProviderreturnbooleanframeworkonEventServiceRoleBE461280",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_boolean)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctionreturnbooleanA4D86E1F",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProviderreturnbooleanframeworkonEventServiceRoleDefaultPolicy83DEAF51",
        "CustomResourceProviderreturnbooleanframeworkonEventServiceRoleBE461280"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_boolean/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcereturnboolean": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProviderreturnbooleanframeworkonEvent0E507764",
            "Arn"
          ]
        },
        "args": "[\"input\"]",
        "kwargs": "{}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-return_boolean/Default"
      }
    },
    "LambdaFunctionreturnlistServiceRoleA9A8E3FD": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-return_list/ServiceRole/Resource"
      }
    },
    "LambdaFunctionreturnlistAEAE7FA6": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef return_list(input):\n  return [input]\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args   = json.loads(props.get('args', '[]'))\n  kwargs = json.loads(props.get('kwargs', '{}'))\n\n  # invoke the original function with the original arguments.\n  return_value = return_list(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctionreturnlistServiceRoleA9A8E3FD",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctionreturnlistServiceRoleA9A8E3FD"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-return_list/Resource"
      }
    },
    "CustomResourceProviderreturnlistframeworkonEventServiceRoleB626B901": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_list/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProviderreturnlistframeworkonEventServiceRoleDefaultPolicy9087E51B": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctionreturnlistAEAE7FA6",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProviderreturnlistframeworkonEventServiceRoleDefaultPolicy9087E51B",
        "Roles": [
          {
            "Ref": "CustomResourceProviderreturnlistframeworkonEventServiceRoleB626B901"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_list/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProviderreturnlistframeworkonEvent1146AFFC": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProviderreturnlistframeworkonEventServiceRoleB626B901",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_list)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctionreturnlistAEAE7FA6",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProviderreturnlistframeworkonEventServiceRoleDefaultPolicy9087E51B",
        "CustomResourceProviderreturnlistframeworkonEventServiceRoleB626B901"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-return_list/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourcereturnlist": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProviderreturnlistframeworkonEvent1146AFFC",
            "Arn"
          ]
        },
        "args": "[\"input\"]",
        "kwargs": "{}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-return_list/Default"
      }
    },
    "LambdaFunctionaccepttokenServiceRole32FFE261": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-accept_token/ServiceRole/Resource"
      }
    },
    "LambdaFunctionaccepttoken98E52450": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\n# this is the original native python function\ndef accept_token(input):\n  return f'token={input}'\n\n# this is the CFN handler\ndef handler(event, context):\n  print(json.dumps(event))\n\n  request_type = event['RequestType']\n  props = event['ResourceProperties']\n\n  if request_type == 'Delete':\n    pass\n\n  args   = json.loads(props.get('args', '[]'))\n  kwargs = json.loads(props.get('kwargs', '{}'))\n\n  # invoke the original function with the original arguments.\n  return_value = accept_token(*args, **kwargs)\n\n  return {'Data': {'Value': return_value}}\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctionaccepttokenServiceRole32FFE261",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 256,
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaFunctionaccepttokenServiceRole32FFE261"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/LambdaFunction-accept_token/Resource"
      }
    },
    "CustomResourceProvideraccepttokenframeworkonEventServiceRole3A680FFF": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-accept_token/framework-onEvent/ServiceRole/Resource"
      }
    },
    "CustomResourceProvideraccepttokenframeworkonEventServiceRoleDefaultPolicyA695B0F4": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LambdaFunctionaccepttoken98E52450",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomResourceProvideraccepttokenframeworkonEventServiceRoleDefaultPolicyA695B0F4",
        "Roles": [
          {
            "Ref": "CustomResourceProvideraccepttokenframeworkonEventServiceRole3A680FFF"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-accept_token/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomResourceProvideraccepttokenframeworkonEvent83E7C483": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CustomResourceProvideraccepttokenframeworkonEventServiceRole3A680FFF",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (aws-cdk-lambdecor-integ-test/CustomResourceProvider-accept_token)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "LambdaFunctionaccepttoken98E52450",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "CustomResourceProvideraccepttokenframeworkonEventServiceRoleDefaultPolicyA695B0F4",
        "CustomResourceProvideraccepttokenframeworkonEventServiceRole3A680FFF"
      ],
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResourceProvider-accept_token/framework-onEvent/Resource",
        "aws:asset:path": "asset.812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14",
        "aws:asset:property": "Code"
      }
    },
    "CustomResourceaccepttoken": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomResourceProvideraccepttokenframeworkonEvent83E7C483",
            "Arn"
          ]
        },
        "args": {
          "Fn::Join": [
            "",
            [
              "[\"",
              {
                "Ref": "Bucket83908E77"
              },
              "\"]"
            ]
          ]
        },
        "kwargs": "{}"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "aws-cdk-lambdecor-integ-test/CustomResource-accept_token/Default"
      }
    }
  },
  "Parameters": {
    "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3BucketE74F71F4": {
      "Type": "String",
      "Description": "S3 bucket for asset \"812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14\""
    },
    "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14S3VersionKeyCDA54A41": {
      "Type": "String",
      "Description": "S3 key for asset version \"812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14\""
    },
    "AssetParameters812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14ArtifactHash47216AA1": {
      "Type": "String",
      "Description": "Artifact hash for asset \"812fb1ad6d57643790c0c720ff7b1226e49679db821db771446a9a950a477b14\""
    }
  },
  "Outputs": {
    "StringResult": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcereturnstring",
          "Value"
        ]
      }
    },
    "IntResult": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcereturnint",
          "Value"
        ]
      }
    },
    "BooleanResult": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcereturnboolean",
          "Value"
        ]
      }
    },
    "ListResult": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourcereturnlist",
          "Value"
        ]
      }
    },
    "TokenResult": {
      "Value": {
        "Fn::GetAtt": [
          "CustomResourceaccepttoken",
          "Value"
        ]
      }
    }
  }
}